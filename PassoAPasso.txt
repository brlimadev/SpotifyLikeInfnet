Aula 01:

- 1 : Criar o Banco de dados LOCALDB

-- 1.2 : Dentro do AppSettings.js na ConnectionString
--- 1.2.1 : Criar a string de conex�o
        "ConnectionStrings": {
            "SpotifyConnection":                    //Nome da Variavel de conex�o
            "Data Source=(LocalDB)\\MSSQLLocalDB;   //Fonte de dados
            Integrated Security=True;               //Logar usando a Credencial do Windows
            Initial Catalog=SpotifyDatabase"        // O nome da base de dados
          }

 -- 1.3 : Adicionar o pacote do Framework
 -- 1.3.1 : Bot�o direito em cima da solu��o no caso API pq � aonde esta o Program.cs >> Manage Nuget Packages
 ---- 1.3.1 Instalar o Microsoft.EntityFrameworkCore // Abstra��o do Banco de dados somete o Provider que vai se conectar com o Banco pra cada tipo tem o seu core, postgree, oracle etc
 ---- 1.3.1 Instalar o Microsoft.EntityFrameworkCore.SqlServer
 ---- 1.3.1 Instalar o Microsoft.EntityFrameworkCore.Design // Pacote obrigat�rio pra usar migrations


 -- 1.4 : Igualar as versoes do EF dos projetos 
 --- 1.4.1 : Clica com o direito na SOLU��O GERAL >> Manage Nuget Package for Solutions



 -- 1.5 : Dentro do Program.cs Configurar o Banco de dados
 --- 1.5.1 : 
         builder.Services.AddDbContext<SpotifyLikeContext>(c =>
        {
            c.UseLazyLoadingProxies()
             .UseSqlServer(builder.Configuration.GetConnectionString("SpotifyConnection"));         // Nome da Conex�o
        });
--- 1.5.2 : Criar a refer�ncia do Projeto de Api para o Projeto de Repositorio
---- 1.5.2.1 : Clicar com o Direito em cima do Projeto de Api Add >> Project References


-- 1.6 : Instalar o EF Toole para Levantar a base de dados com o EF core Tools Le o projeto com Output e Ferramenta de linha de comando lendo o projeto onde esta o mapeamento e o os outputs
--- 1.6.1 : dotnet tool install --global dotnet-ef

-- 1.7 : migration cria o script
-- 1.7 : database roda o script
-- 1.7 : Clica com o direito em cima da solu��o open folder in file explorer pra pegar o endere�o
-- 1.7 : cmd C:\Users\Bruno\source\repos\brlimadev\SpotifyLikeInfnet
-- 1.7 : dotnet ef migrations --help
-- 1.7 : vamos usar o add 
-- 1.7 : pra entender o add 
-- 1.7 : dotnet ef migrations add --help
-- 1.7 : parametros
---1.7.1 : -o output saida se nao especificar usa o default
---1.7.2 : -c contexto a base o spotfylikecontext
---1.7.3 : -p projeto aonde ta o mapping o repositorio
---1.7.4 : -s projeto onde ta configurado o banco de dados
---1.7.5 : Como ficou o comando(Lembrando que tem que ta tudo na mesma linha): 
---1.7.5.1 : dotnet ef migrations add NomeDaBaseInicial     -c SpotifyLikeContext      -p C:\Users\Bruno\source\repos\brlimadev\SpotifyLikeInfnet\SpotifyLike.Repository\SpotifyLike.Repository.csproj     -s C:\Users\Bruno\source\repos\brlimadev\SpotifyLikeInfnet\SpotifyLike.Api\SpotifyLike.Api.csproj

-- 1.8 : Abrir o Sql Server pelo visual studio
--- 1.8 : -- View >> Server Explorer >> aba 
--- 1.8 : >> Data Connections >> Add Conection >> Sql Server 
--- 1.8 : >> Server Name: (LocalDB)\MSSQLLocalDB >> Authentication: Windows Authentication >> Test Connection
--- 1.8 : >> Depois de testar em Select database name carregar 
--- 1.8 :  N�o consegui pelo visual studio abri o ssms joguei la e foi

-- 1.9 : Rodar o script para criar o banco
-- dotnet ef database update    -c SpotifyLikeContext      -p C:\Users\Bruno\source\repos\brlimadev\SpotifyLikeInfnet\SpotifyLike.Repository\SpotifyLike.Repository.csproj     -s C:\Users\Bruno\source\repos\brlimadev\SpotifyLikeInfnet\SpotifyLike.Api\SpotifyLike.Api.csproj

---- Confirmar se falta algo no final da aula


Aula 05:

>> Instalar o node, buscar no google node
>> pra verificar se ja tem instalado só jogar no cmd do windows
>> node -v
>> npm -v
>> Reinicia a maquina
>> npm install -g @angular/cli
>> entra na pasta do front no repos cd 
        C:\Users\brlim\source\repos\SpotifyLikeInfnet\frontend
>>e digita code .
>> Ele abre no vscode
>> se nao abrir da um npm install

Aula 06:

1.	Rotas é aonde queremos chegar pra mudar o conteúdo como se fosse no MVC um renderBody ou a view e os htmls

1.2 - Dentro do app.component colocar o <router-outlet></router-outlet> quando eu coloco isso
        eu to especificando que na linha 09 meus comp filhos e rotas filhas vao ser colocadas aqui 
        nesse espaço. Como se fosse o Layou base pra nao precisar copiar em todos os htmls.


1.3 - Dentro do app.route.ts onde vou especificar as rotas

1.3.1 - Primeira rota a especificar é o path, caminho vazio pra pegar o default quando executr a 
        aplicacao que é a home

                export const routes: Routes = [
            {
                path: ''
            }
        ];

1.3.2.1 - Gerar o componente Botão Direito em cima de app 
            >> Angular Schematics generate file 
            >> o que eu quero gerar? Component >> nome:Home 
            >> Precisa importar algo mais? N >> Somente o CommomModule Angular Core somente
            >> Confirm

            Ele criou o home.component.ts e o .css faltou o template 



1.3.3 - Outra maneira de criar o componente só ue com Html, o ts e o css dentro de uma pasta home
        pra quando ele entrar no default ele va direto pra home
        Botao direito no app >> Open in terminal >>ng generate component Home


1.3.4 - Gerado o componente eu tenho que setar o componente dentro do app.route

                export const routes: Routes = [
            {
                path: '',
                component: HomeComponent
            }
        ];

1.3.4.1 - Agora onde estiver routeoutlet ele vai colocar o conteudo do template da home nesse caso o html


1.4 - Montando um Card para jogar dentro desse home.component.html

1.4.1 - Vai na Documentacao do Angular Material 
        >> Component
        >> Card
        >> Examples
        >> Clica em <> View Code 
        >> Copia o Html e joga dentro de home.component.html
        >> Ele vai reclamar pq nao importou dentro do home.component
        >> Ainda na documentação Entra na aba TS e copia                 
                import {MatIconModule} from '@angular/material/icon';
                import {MatButtonModule} from '@angular/material/button';
        >> Cola dentro do app.Components
        >> E dentro do app.Components tbm acrescenta na linha imports
                imports: [RouterOutlet, MatToolbarModule, MatButtonModule, MatIconModule],
        >> Copia o css e joga dentro de home.component.css
        >> Se ele nao ficar renderizado direito tira a div do app.component.html
            <div>
            <router-outlet></router-outlet>   
            </div>

1.5 - Com o Card criado na tela eu vou precisar pegar os dados do BackEnd pra fazer isso utilizamos um 
        componente chamado serviço.

        1.5.1 - Cria uma pasta Services app >> services
        >> Abre em terminal integrado abre a pasta no propt
        >> ng generate service banda
        
1.5.1 - Dentro de banda.service.ts
        tag injectable -- Injeção de dependencia

1.5.2 - Injetar o httpCliente 
        export class BandaService {

        constructor(httpClient: HttpClient) { }
        }
1.5.3 - Criar o método para pegar todas as bandas
        export class BandaService {

        constructor(httpClient: HttpClient) { }

          public getBanda(): Observable -- <?????> de que??
            {

            }

        }

1.5.4 - Como ainda nao criamos o modelo quando o angular fazer a requisição ele transofrma 
        o resultado em obj javascript com os mesmos nomes do retorno da requisicao
        preciso criar um modelo igual ao model de banco de dados
        onde a propriedade e a coluna e a classe e a tabela

1.5.5 - Criar uma pasta model Direito app >> new file >> model

        o que eu preciso pra criar a banda o que ele vai me voltar do get do controle
        ele me retorna um objeto bantadto.cs
        entao preciso das mesmas propriedades do back


1.5.5.1 - Cria o arquivo Banda.ts dentro da pasta model

1.5.5.2 - Só que vamos usar interface para esse modelo, seguindo a mesma estrutura do model do BackEnd
        export interface Banda{
            id:String;
            nome:String;
            descricao:String;
            backdrop:String;
        }


Agora volto la no meu service e ja posso monta um observable de banda
        import { Injectable } from '@angular/core';

        @Injectable({
            providedIn: 'root'
            })
            export class BandaService {

            private url = "https://localhost:7206/api/Banda"; // ROTA DO GET VIA SWAGGER

            constructor(private httpClient: HttpClient) { }

            public getBanda() : Observable<Banda[]>{ // PEGA O OBJETO BANDA E TRANSFORMA EM UM []
                return this.httpClient.get<Banda[]>(this.url)
            }
        }
        








        